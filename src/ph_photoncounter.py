#!/usr/bin/env python
# -*- coding:utf-8 -*- 


##############################################################################
## license :
##============================================================================
##
## File :        PH_PhotonCounter.py
## 
## Project :     PicoHarp photon counter
##
## $Author :      sblanch$
##
## $Revision :    $
##
## $Date :        $
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""This device has been conceived to introduce a PicoHarp300 instrument 
with in the tango control system.

This device is not using directly the manufacturer's library. In this repository
you can find a cython extension to bind their library to python."""

__all__ = ["PH_PhotonCounter", "PH_PhotonCounterClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(PH_PhotonCounter.additionnal_import) ENABLED START -----#
import PicoHarp
#----- PROTECTED REGION END -----#	//	PH_PhotonCounter.additionnal_import

##############################################################################
## Device States Description
##
## FAULT : Decay state when something went wrong.
## INIT : Initialization process.
## OFF : Instrument discovered, but not yet open communication.
## ON : Instrument available.
## RUNNING : Acquisition ongoing.
##############################################################################

class PH_PhotonCounter (PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------
#----- PROTECTED REGION ID(PH_PhotonCounter.global_variables) ENABLED START -----#
    def discover(self):
        self.__discoverer = PicoHarp.Discoverer(debug=True)
        if not self.SerialNumber in self.__discoverer.serials:
            self.debug_stream("Not found %s in %s"
                              %(self.SerialNumber,self.__discoverer.serials))
            self.set_state(PyTango.DevState.FAULT)
            return False
        self.set_state(PyTango.DevState.OFF)
        return True
    
    def connect(self):
        self.__devidx = self.__discoverer.search(self.SerialNumber)
        self.__instrument = PicoHarp.Instrument(self.__devidx,debug=True)
        self.set_state(PyTango.DevState.ON)
        
    def disconnect(self):
        self.__instrument = None
        self.set_state(PyTango.DevState.OFF)
        
        
#----- PROTECTED REGION END -----#	//	PH_PhotonCounter.global_variables
#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In " + self.get_name() + ".__init__()")
        PH_PhotonCounter.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        self.debug_stream("In " + self.get_name() + ".delete_device()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.delete_device

#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        self.debug_stream("In " + self.get_name() + ".init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_InstrumentModel_read = ''
        self.attr_InstrumentPartnum_read = ''
        self.attr_InstrumentVersion_read = ''
        self.attr_SyncDivider_read = 0
        self.attr_ZeroCrossCh0_read = 0
        self.attr_ZeroCrossCh1_read = 0
        self.attr_LevelCh0_read = 0
        self.attr_LevelCh1_read = 0
        self.attr_Resolution_read = 0.0
        self.attr_Binning_read = 0
        self.attr_BaseResolution_read = 0.0
        self.attr_Offset_read = 0
        self.attr_CountRateCh0_read = 0
        self.attr_CountRateCh1_read = 0
        self.attr_OverflowStopper_read = False
        self.attr_OverflowStopperThreshold_read = 0
        self.attr_AcquisitionTime_read = 0.0
        self.attr_Flags_read = 0
        self.attr_IntegralCount_read = 0
        self.attr_Histogram_read = [0]
        #----- PROTECTED REGION ID(PH_PhotonCounter.init_device) ENABLED START -----#
        self.__discoverer = None
        if not self.discover():
            return
        self.__devidx = None
        self.__instrument = None
        self.connect()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.init_device

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        self.debug_stream("In " + self.get_name() + ".always_excuted_hook()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.always_executed_hook

#==================================================================
#
#    PH_PhotonCounter read/write attribute methods
#
#==================================================================

#------------------------------------------------------------------
#    Read InstrumentModel attribute
#------------------------------------------------------------------
    def read_InstrumentModel(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_InstrumentModel()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.InstrumentModel_read) ENABLED START -----#
        self.attr_InstrumentModel_read = self.__instrument.__model__
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.InstrumentModel_read
        attr.set_value(self.attr_InstrumentModel_read)
        
#------------------------------------------------------------------
#    Is InstrumentModel attribute allowed
#------------------------------------------------------------------
    def is_InstrumentModel_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_InstrumentModel_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read InstrumentPartnum attribute
#------------------------------------------------------------------
    def read_InstrumentPartnum(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_InstrumentPartnum()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.InstrumentPartnum_read) ENABLED START -----#
        self.attr_InstrumentPartnum_read = self.__instrument.__partnum__
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.InstrumentPartnum_read
        attr.set_value(self.attr_InstrumentPartnum_read)
        
#------------------------------------------------------------------
#    Is InstrumentPartnum attribute allowed
#------------------------------------------------------------------
    def is_InstrumentPartnum_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_InstrumentPartnum_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read InstrumentVersion attribute
#------------------------------------------------------------------
    def read_InstrumentVersion(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_InstrumentVersion()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.InstrumentVersion_read) ENABLED START -----#
        self.attr_InstrumentVersion_read = self.__instrument.__version__
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.InstrumentVersion_read
        attr.set_value(self.attr_InstrumentVersion_read)
        
#------------------------------------------------------------------
#    Is InstrumentVersion attribute allowed
#------------------------------------------------------------------
    def is_InstrumentVersion_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_InstrumentVersion_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read SyncDivider attribute
#------------------------------------------------------------------
    def read_SyncDivider(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_SyncDivider()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.SyncDivider_read) ENABLED START -----#
        attr_SyncDivider_read = self.__instrument.getSyncDivider()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.SyncDivider_read
        attr.set_value(self.attr_SyncDivider_read)
        
#------------------------------------------------------------------
#    Write SyncDivider attribute
#------------------------------------------------------------------
    def write_SyncDivider(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_SyncDivider()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.SyncDivider_write) ENABLED START -----#
        self.__instrument.setSyncDivider(data)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.SyncDivider_write
        
#------------------------------------------------------------------
#    Is SyncDivider attribute allowed
#------------------------------------------------------------------
    def is_SyncDivider_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_SyncDivider_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read ZeroCrossCh0 attribute
#------------------------------------------------------------------
    def read_ZeroCrossCh0(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_ZeroCrossCh0()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.ZeroCrossCh0_read) ENABLED START -----#
        self.attr_ZeroCrossCh0_read, level = self.__instrument.getInputCFD(0)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.ZeroCrossCh0_read
        attr.set_value(self.attr_ZeroCrossCh0_read)
        
#------------------------------------------------------------------
#    Write ZeroCrossCh0 attribute
#------------------------------------------------------------------
    def write_ZeroCrossCh0(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_ZeroCrossCh0()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.ZeroCrossCh0_write) ENABLED START -----#
        self.__instrument.setInputCFD(0,CFDZeroCross=data)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.ZeroCrossCh0_write
        
#------------------------------------------------------------------
#    Is ZeroCrossCh0 attribute allowed
#------------------------------------------------------------------
    def is_ZeroCrossCh0_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_ZeroCrossCh0_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read ZeroCrossCh1 attribute
#------------------------------------------------------------------
    def read_ZeroCrossCh1(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_ZeroCrossCh1()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.ZeroCrossCh1_read) ENABLED START -----#
        self.attr_ZeroCrossCh1_read, level = self.__instrument.getInputCFD(1)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.ZeroCrossCh1_read
        attr.set_value(self.attr_ZeroCrossCh1_read)
        
#------------------------------------------------------------------
#    Write ZeroCrossCh1 attribute
#------------------------------------------------------------------
    def write_ZeroCrossCh1(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_ZeroCrossCh1()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.ZeroCrossCh1_write) ENABLED START -----#
        self.__instrument.setInputCFD(1,CFDZeroCross=data)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.ZeroCrossCh1_write
        
#------------------------------------------------------------------
#    Is ZeroCrossCh1 attribute allowed
#------------------------------------------------------------------
    def is_ZeroCrossCh1_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_ZeroCrossCh1_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read LevelCh0 attribute
#------------------------------------------------------------------
    def read_LevelCh0(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_LevelCh0()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.LevelCh0_read) ENABLED START -----#
        ZeroCross, self.attr_LevelCh0_read = self.__instrument.getInputCFD(0)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.LevelCh0_read
        attr.set_value(self.attr_LevelCh0_read)
        
#------------------------------------------------------------------
#    Write LevelCh0 attribute
#------------------------------------------------------------------
    def write_LevelCh0(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_LevelCh0()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.LevelCh0_write) ENABLED START -----#
        self.__instrument.setInputCFD(0,CFDLevel=data)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.LevelCh0_write
        
#------------------------------------------------------------------
#    Is LevelCh0 attribute allowed
#------------------------------------------------------------------
    def is_LevelCh0_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_LevelCh0_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read LevelCh1 attribute
#------------------------------------------------------------------
    def read_LevelCh1(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_LevelCh1()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.LevelCh1_read) ENABLED START -----#
        ZeroCross, self.attr_LevelCh1_read = self.__instrument.getInputCFD(1)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.LevelCh1_read
        attr.set_value(self.attr_LevelCh1_read)
        
#------------------------------------------------------------------
#    Write LevelCh1 attribute
#------------------------------------------------------------------
    def write_LevelCh1(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_LevelCh1()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.LevelCh1_write) ENABLED START -----#
        self.__instrument.setInputCFD(1,CFDLevel=data)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.LevelCh1_write
        
#------------------------------------------------------------------
#    Is LevelCh1 attribute allowed
#------------------------------------------------------------------
    def is_LevelCh1_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_LevelCh1_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read Resolution attribute
#------------------------------------------------------------------
    def read_Resolution(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_Resolution()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Resolution_read) ENABLED START -----#
        self.attr_Resolution_read = self.__instrument.getResolution()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Resolution_read
        attr.set_value(self.attr_Resolution_read)
        
#------------------------------------------------------------------
#    Is Resolution attribute allowed
#------------------------------------------------------------------
    def is_Resolution_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_Resolution_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read Binning attribute
#------------------------------------------------------------------
    def read_Binning(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_Binning()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Binning_read) ENABLED START -----#
        self.attr_Binning_read = self.__instrument.getBinning()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Binning_read
        attr.set_value(self.attr_Binning_read)
        
#------------------------------------------------------------------
#    Write Binning attribute
#------------------------------------------------------------------
    def write_Binning(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_Binning()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.Binning_write) ENABLED START -----#
        self.__instrument.setBinning(data)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Binning_write
        
#------------------------------------------------------------------
#    Is Binning attribute allowed
#------------------------------------------------------------------
    def is_Binning_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_Binning_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read BaseResolution attribute
#------------------------------------------------------------------
    def read_BaseResolution(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_BaseResolution()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.BaseResolution_read) ENABLED START -----#
        self.attr_BaseResolution_read = self.__instrument.getBaseResolution()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.BaseResolution_read
        attr.set_value(self.attr_BaseResolution_read)
        
#------------------------------------------------------------------
#    Is BaseResolution attribute allowed
#------------------------------------------------------------------
    def is_BaseResolution_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_BaseResolution_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read Offset attribute
#------------------------------------------------------------------
    def read_Offset(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_Offset()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Offset_read) ENABLED START -----#
        self.attr_Offset_read = self.__instrument.getOffset()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Offset_read
        attr.set_value(self.attr_Offset_read)
        
#------------------------------------------------------------------
#    Write Offset attribute
#------------------------------------------------------------------
    def write_Offset(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_Offset()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.Offset_write) ENABLED START -----#
        self.__instrument.setOffset(data)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Offset_write
        
#------------------------------------------------------------------
#    Is Offset attribute allowed
#------------------------------------------------------------------
    def is_Offset_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_Offset_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read CountRateCh0 attribute
#------------------------------------------------------------------
    def read_CountRateCh0(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_CountRateCh0()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.CountRateCh0_read) ENABLED START -----#
        self.attr_CountRateCh0_read = self.__instrument.getCountRate(0)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.CountRateCh0_read
        attr.set_value(self.attr_CountRateCh0_read)
        
#------------------------------------------------------------------
#    Is CountRateCh0 attribute allowed
#------------------------------------------------------------------
    def is_CountRateCh0_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_CountRateCh0_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read CountRateCh1 attribute
#------------------------------------------------------------------
    def read_CountRateCh1(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_CountRateCh1()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.CountRateCh1_read) ENABLED START -----#
        self.attr_CountRateCh1_read = self.__instrument.getCountRate(1)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.CountRateCh1_read
        attr.set_value(self.attr_CountRateCh1_read)
        
#------------------------------------------------------------------
#    Is CountRateCh1 attribute allowed
#------------------------------------------------------------------
    def is_CountRateCh1_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_CountRateCh1_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF,
            PyTango.DevState.RUNNING])
        
#------------------------------------------------------------------
#    Read OverflowStopper attribute
#------------------------------------------------------------------
    def read_OverflowStopper(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_OverflowStopper()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.OverflowStopper_read) ENABLED START -----#
        self.attr_OverflowStopper_read,stopperCt = self.__instrument.getStopOverflow()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.OverflowStopper_read
        attr.set_value(self.attr_OverflowStopper_read)
        
#------------------------------------------------------------------
#    Write OverflowStopper attribute
#------------------------------------------------------------------
    def write_OverflowStopper(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_OverflowStopper()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.OverflowStopper_write) ENABLED START -----#
        self.__instrument.setStopOverflow(stop=data)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.OverflowStopper_write
        
#------------------------------------------------------------------
#    Is OverflowStopper attribute allowed
#------------------------------------------------------------------
    def is_OverflowStopper_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_OverflowStopper_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read OverflowStopperThreshold attribute
#------------------------------------------------------------------
    def read_OverflowStopperThreshold(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_OverflowStopperThreshold()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.OverflowStopperThreshold_read) ENABLED START -----#
        stopper,self.attr_OverflowStopperThreshold_read = self.__instrument.getStopOverflow()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.OverflowStopperThreshold_read
        attr.set_value(self.attr_OverflowStopperThreshold_read)
        
#------------------------------------------------------------------
#    Write OverflowStopperThreshold attribute
#------------------------------------------------------------------
    def write_OverflowStopperThreshold(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_OverflowStopperThreshold()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.OverflowStopperThreshold_write) ENABLED START -----#
        self.__instrument.setStopOverflow(count=data)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.OverflowStopperThreshold_write
        
#------------------------------------------------------------------
#    Is OverflowStopperThreshold attribute allowed
#------------------------------------------------------------------
    def is_OverflowStopperThreshold_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_OverflowStopperThreshold_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read AcquisitionTime attribute
#------------------------------------------------------------------
    def read_AcquisitionTime(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_AcquisitionTime()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.AcquisitionTime_read) ENABLED START -----#
        self.attr_AcquisitionTime_read = self.__instrument.getAcquisitionTime()/1000.
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.AcquisitionTime_read
        attr.set_value(self.attr_AcquisitionTime_read)
        
#------------------------------------------------------------------
#    Write AcquisitionTime attribute
#------------------------------------------------------------------
    def write_AcquisitionTime(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_AcquisitionTime()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.AcquisitionTime_write) ENABLED START -----#
        self.__instrument.setAcquisitionTime(int(data*1000))
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.AcquisitionTime_write
        
#------------------------------------------------------------------
#    Is AcquisitionTime attribute allowed
#------------------------------------------------------------------
    def is_AcquisitionTime_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_AcquisitionTime_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read Flags attribute
#------------------------------------------------------------------
    def read_Flags(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_Flags()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Flags_read) ENABLED START -----#
        self.attr_Flags_read = self.__instrument.getFlags()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Flags_read
        attr.set_value(self.attr_Flags_read)
        
#------------------------------------------------------------------
#    Is Flags attribute allowed
#------------------------------------------------------------------
    def is_Flags_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_Flags_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read IntegralCount attribute
#------------------------------------------------------------------
    def read_IntegralCount(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_IntegralCount()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.IntegralCount_read) ENABLED START -----#
        self.attr_IntegralCount_read = self.__instrument.integralCount()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.IntegralCount_read
        attr.set_value(self.attr_IntegralCount_read)
        
#------------------------------------------------------------------
#    Is IntegralCount attribute allowed
#------------------------------------------------------------------
    def is_IntegralCount_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_IntegralCount_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read Histogram attribute
#------------------------------------------------------------------
    def read_Histogram(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_Histogram()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Histogram_read) ENABLED START -----#
        self.attr_Histogram_read = self.__instrument.getHistogram()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Histogram_read
        attr.set_value(self.attr_Histogram_read)
        
#------------------------------------------------------------------
#    Is Histogram attribute allowed
#------------------------------------------------------------------
    def is_Histogram_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_Histogram_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        



#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self, data):
        self.debug_stream("In " + self.get_name() + ".read_attr_hardware()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.read_attr_hardware


#==================================================================
#
#    PH_PhotonCounter command methods
#
#==================================================================

#------------------------------------------------------------------
#    On command:
#------------------------------------------------------------------
    def On(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In " + self.get_name() +  ".On()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.On) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.On
        
#------------------------------------------------------------------
#    Is On command allowed
#------------------------------------------------------------------
    def is_On_allowed(self):
        self.debug_stream("In " + self.get_name() + ".is_On_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.ON,
            PyTango.DevState.RUNNING])
#------------------------------------------------------------------
#    Off command:
#------------------------------------------------------------------
    def Off(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In " + self.get_name() +  ".Off()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Off) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Off
        
#------------------------------------------------------------------
#    Is Off command allowed
#------------------------------------------------------------------
    def is_Off_allowed(self):
        self.debug_stream("In " + self.get_name() + ".is_Off_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF,
            PyTango.DevState.RUNNING])
#------------------------------------------------------------------
#    Start command:
#------------------------------------------------------------------
    def Start(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In " + self.get_name() +  ".Start()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Start) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Start
        
#------------------------------------------------------------------
#    Is Start command allowed
#------------------------------------------------------------------
    def is_Start_allowed(self):
        self.debug_stream("In " + self.get_name() + ".is_Start_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF,
            PyTango.DevState.RUNNING])
#------------------------------------------------------------------
#    Stop command:
#------------------------------------------------------------------
    def Stop(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In " + self.get_name() +  ".Stop()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Stop) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Stop
        
#------------------------------------------------------------------
#    Is Stop command allowed
#------------------------------------------------------------------
    def is_Stop_allowed(self):
        self.debug_stream("In " + self.get_name() + ".is_Stop_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF,
            PyTango.DevState.ON])
#------------------------------------------------------------------
#    Acquire command:
#------------------------------------------------------------------
    def Acquire(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In " + self.get_name() +  ".Acquire()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Acquire) ENABLED START -----#
        self.__instrument.acquire(async=True)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Acquire
        
#------------------------------------------------------------------
#    Is Acquire command allowed
#------------------------------------------------------------------
    def is_Acquire_allowed(self):
        self.debug_stream("In " + self.get_name() + ".is_Acquire_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF,
            PyTango.DevState.RUNNING])
#------------------------------------------------------------------
#    Abort command:
#------------------------------------------------------------------
    def Abort(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In " + self.get_name() +  ".Abort()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Abort) ENABLED START -----#
        self.__instrument.abort()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Abort
        
#------------------------------------------------------------------
#    Is Abort command allowed
#------------------------------------------------------------------
    def is_Abort_allowed(self):
        self.debug_stream("In " + self.get_name() + ".is_Abort_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF,
            PyTango.DevState.ON])

#==================================================================
#
#    PH_PhotonCounterClass class definition
#
#==================================================================
class PH_PhotonCounterClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'SerialNumber':
            [PyTango.DevString,
            "Serial number of the instrument to contact",
            [] ],
        }


    #    Command definitions
    cmd_list = {
        'On':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Off':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Start':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Stop':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Acquire':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Abort':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'InstrumentModel':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Model",
                'description': "Name given by the instrument about its model.",
            } ],
        'InstrumentPartnum':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "PartNum",
                'description': "Name given by the instrument about its partnum.",
            } ],
        'InstrumentVersion':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "firmware version",
                'description': "Firmware version of the instrument.",
            } ],
        'SyncDivider':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Divider",
                'description': "Programable divider of the sync input. This allows to reduce the sync input rate.",
                'Memorized':"true"
            } ],
        'ZeroCrossCh0':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Zero Cross Channel 0",
                'unit': "mV",
                'description': "Zero cross level of the Constant Fraction Discriminator (CFD) for the channel 0",
                'Memorized':"true"
            } ],
        'ZeroCrossCh1':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Zero Cross Channel 1",
                'unit': "mV",
                'description': "Zero cross level of the Constant Fraction Discriminator (CFD) for the channel 1",
                'Memorized':"true"
            } ],
        'LevelCh0':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Level Channel 0",
                'unit': "mV",
                'description': "Discriminator level of the Constant Fraction Discriminator (CFD) for the channel 0",
                'Memorized':"true"
            } ],
        'LevelCh1':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Level Channel 1",
                'unit': "mV",
                'description': "Discriminator level of the Constant Fraction Discriminator (CFD) for the channel 1",
                'Memorized':"true"
            } ],
        'Resolution':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Resolution",
                'unit': "ps",
                'description': "Acquisition resolution.",
            } ],
        'Binning':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Binning",
                'description': "To configure the resolution. Steps from 0 to 7 means resolutions 4, 8, 16, 32, ..., 512 ps.",
                'Memorized':"true"
            } ],
        'BaseResolution':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Base Resolution",
                'unit': "ps",
                'description': "The very basic resolution where no binning can be applied.",
            } ],
        'Offset':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Offset",
                'unit': "ns",
                'description': "Delay the acquisition window relatively to the sync frame.",
                'Memorized':"true"
            } ],
        'CountRateCh0':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Count Rate Channel 0",
                'unit': "cps",
                'format': "%g",
            } ],
        'CountRateCh1':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Count Rate Channel 1",
                'unit': "cps",
                'format': "%g",
            } ],
        'OverflowStopper':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Overflow stopper",
                'Display level': PyTango.DispLevel.EXPERT,
                'Memorized':"true"
            } ],
        'OverflowStopperThreshold':
            [[PyTango.DevULong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Overflow threshold",
                'Display level': PyTango.DispLevel.EXPERT,
                'Memorized':"true"
            } ],
        'AcquisitionTime':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Acquisition time",
                'unit': "s",
                'Memorized':"true"
            } ],
        'Flags':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'Display level': PyTango.DispLevel.EXPERT,
            } ],
        'IntegralCount':
            [[PyTango.DevLong64,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Integration",
                'unit': "counts",
            } ],
        'Histogram':
            [[PyTango.DevLong,
            PyTango.SPECTRUM,
            PyTango.READ, 65536]],
        }


#------------------------------------------------------------------
#    PH_PhotonCounterClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In PH_PhotonCounter Class  constructor"

#==================================================================
#
#    PH_PhotonCounter class main method
#
#==================================================================
def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(PH_PhotonCounterClass,PH_PhotonCounter,'PH_PhotonCounter')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e

if __name__ == '__main__':
    main()
