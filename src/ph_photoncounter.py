#!/usr/bin/env python
# -*- coding:utf-8 -*- 


##############################################################################
## license :
##============================================================================
##
## File :        PH_PhotonCounter.py
## 
## Project :     PicoHarp photon counter
##
## $Author :      sblanch$
##
## $Revision :    $
##
## $Date :        $
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""This device has been conceived to introduce a PicoHarp300 instrument 
with in the tango control system.

This device is not using directly the manufacturer's library. In this repository
you can find a cython extension to bind their library to python."""

__all__ = ["PH_PhotonCounter", "PH_PhotonCounterClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(PH_PhotonCounter.additionnal_import) ENABLED START -----#
import PicoHarp
import numpy as np
from types import StringType #used for Exec()
import pprint #used for Exec()
import threading
import time
#----- PROTECTED REGION END -----#	//	PH_PhotonCounter.additionnal_import

##############################################################################
## Device States Description
##
## ALARM : Alert that something is not going as expected, but it's not blocking.
## FAULT : Decay state when something went wrong. Requires Init().
## INIT : Initialization process.
## OFF : Instrument discovered, but not yet open communication.
## ON : Instrument available (or simulated).
## RUNNING : An acquisition is going on.
## STANDBY : In a continuous acquisition this is the intermediate state.
##############################################################################

class PH_PhotonCounter (PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------
#----- PROTECTED REGION ID(PH_PhotonCounter.global_variables) ENABLED START -----#
    _important_logs = []
    #---- Events region
    def set_state(self, newState):
        '''Overload of the superclass method to add event 
           emission functionality.
        '''
        if self.get_state() != newState:
            self.warn_stream("Change state from %s to %s"
                             %(self.get_state(),newState))
            PyTango.Device_4Impl.set_state(self, newState)
            self.push_change_event('State',newState)
            self.set_status("")
    def set_status(self, newLine2status,important=False):
        '''Overload of the superclass method to add the extra feature of
           the persistent messages added to the status string.
        '''
        #self.debug_stream("In set_status()")
        newStatus = ""#The device is in %s state.\n"%(self.get_state())
        for importantMsg in self._important_logs:
            if len(importantMsg) > 0:
                newStatus = "%s%s\n"%(newStatus,importantMsg)
        if len(newLine2status) > 0 and \
           not newLine2status in self._important_logs:
            newStatus = "%s%s\n"%(newStatus,newLine2status)
            if important:
                self._important_logs.append(newLine2status)
        if len(newStatus) == 0:
            newStatus = "The device is in %s state.\n"%(self.get_state())
        oldStatus = self.get_status()
        if newStatus != oldStatus:
            PyTango.Device_4Impl.set_status(self, newStatus)
            self.warn_stream("New status message: %s"
                              %(repr(self.get_status())))
            self.push_change_event('Status',newStatus)
    def clean_status(self):
        '''With the extra feature of the important logs, this method allows
           to clean all those logs as a clean interlocks method does.
        '''
        self.debug_stream("In clean_status()")
        self._important_logs = []
        self.set_status("")
    def fireEvent(self,attrEventStruct,timestamp=None):
        '''Method with the procedure to emit an event from one existing 
           attribute. Minimal needs are the attribute name and the value
           to emit, but also can be specified the quality and the timestamp
        '''
        if timestamp == None:
            timestamp = time.time()
        #self.debug_stream("In fireEvent() attribute %s"
        #                  %(attrEventStruct[0]))
        if len(attrEventStruct) == 3: #the quality is specified
            self.push_change_event(attrEventStruct[0],attrEventStruct[1],
                                   timestamp,
                                   attrEventStruct[2])
        else:
            self.push_change_event(attrEventStruct[0],attrEventStruct[1],
                                   timestamp,
                                   PyTango.AttrQuality.ATTR_VALID)
    
    def fireEventsList(self,eventsAttrList,log=True):
        '''Given a set of pair [attr,value] (with an optional third element
           with the quality) emit events for all of them with the same
           timestamp.
        '''
        if log:
            self.debug_stream("In fireEventsList():\n%s"
                              %(''.join("\t%s\n"
                                        %self._debugAttributeEvent(line) \
                                        for line in eventsAttrList)))
        timestamp = time.time()
        attrNames = []
        for attrEvent in eventsAttrList:
            try:
                self.fireEvent(attrEvent,timestamp)
                attrNames.append(attrEvent[0])
            except Exception,e:
                self.error_stream("In fireEventsList() Exception with "\
                                  "attribute %s: %s"%(attrEvent[0],e))
    def _debugAttributeEvent(self,attrEventStruct):
        if type(attrEventStruct[1]) == list and len(attrEventStruct[1])>21:
            if len(attrEventStruct) == 3:
                return '[%s,%s (...) %s,%s'%(attrEventStruct[0],
                                             repr(attrEventStruct[1][:7])[:-1],
                                             repr(attrEventStruct[1][-7:])[1:],
                                             attrEventStruct[2])
            else:
                return '[%s,%s (...) %s,%s'%(attrEventStruct[0],
                                             repr(attrEventStruct[1][:7])[:-1],
                                             repr(attrEventStruct[1][-7:])[1:])
        else:
            return '%s'%(attrEventStruct)
    #---- Done events region

    #---- Instrument connectivity region
    def discover(self):
        self._discoverer = PicoHarp.Discoverer(debug=True)
        if not self.SerialNumber in self._discoverer.serials:
            self.debug_stream("Not found %s in %s"
                              %(self.SerialNumber,self._discoverer.serials))
            if not self.Simulation:
                self.set_state(PyTango.DevState.FAULT)
                return False
        self.set_state(PyTango.DevState.OFF)
        return True
    def connect(self):
        if not self.Simulation:
            self._devidx = self._discoverer.search(self.SerialNumber)
            self._instrument = PicoHarp.Instrument(self._devidx,debug=True)
        else:
            self._instrument = PicoHarp.InstrumentSimulator(debug=True)
        self.set_state(PyTango.DevState.ON)
        self.fireEventsList([['InstrumentModel',self._instrument.__model__],
                             ['InstrumentPartnum',self._instrument.__partnum__],
                             ['InstrumentVersion',self._instrument.__version__],
                             ['BaseResolution',self._instrument.getBaseResolution()]])
        
    def disconnect(self):
        self._instrument = None
        self.set_state(PyTango.DevState.OFF)
    #---- Done instrument connectivity region
    
    #---- Threaded acquisition region
    def fireAcqusitionEvents(self,quality=PyTango.AttrQuality.ATTR_VALID):
        countRate = self._instrument.getCountRates()
        flags = self._instrument.getFlags()
        IntegralCount = self._instrument.integralCount()
        histogram = self._instrument.getHistogram()
        HistogramMaxValue = np.array(histogram).max()
        self.fireEventsList([['CountRateCh0',countRate[0],quality],
                             ['CountRateCh1',countRate[1],quality],
                             ['Flags',flags,quality],
                             ['IntegralCount',IntegralCount,quality],
                             ['HistogramMaxValue',HistogramMaxValue,quality],
                             ['Histogram',histogram,quality]])
    
    def singleAcquisition(self):
        self.clean_status()
        self._acquisitionThread = threading.Thread(target=self._doSingleAcq)
        self._acquisitionStop.clear()
        self._acquisitionThread.start()
        
    def _doSingleAcq(self,endState=PyTango.DevState.ON):
        self.set_state(PyTango.DevState.RUNNING)
        self._instrument.acquire(async=True)
        while not self._instrument.isAsyncAcquisitionDone():
            if self._acquisitionStop.isSet():
                self._instrument.abort()
                break
            time.sleep(0.1)
            #launch events with "changing" quality
            self.fireAcqusitionEvents(PyTango.AttrQuality.ATTR_CHANGING)
        #launch final events with quality "valid"
        self.fireAcqusitionEvents()
        self.set_state(endState)

    def continuousAcquisition(self):
        self.clean_status()
        self._acquisitionThread = threading.Thread(target=self._doContinuousAcq)
        self._acquisitionStop.clear()
        self._acquisitionThread.start()
        
    def _doContinuousAcq(self):
        self.set_state(PyTango.DevState.STANDBY)
        while not self._acquisitionStop.isSet():
            self._doSingleAcq(endState=PyTango.DevState.STANDBY)
        self.set_state(PyTango.DevState.ON)
    #---- Done threaded acquisition region
#----- PROTECTED REGION END -----#	//	PH_PhotonCounter.global_variables
#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In " + self.get_name() + ".__init__()")
        PH_PhotonCounter.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        self.debug_stream("In " + self.get_name() + ".delete_device()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.delete_device

#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        self.debug_stream("In " + self.get_name() + ".init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_InstrumentModel_read = ''
        self.attr_InstrumentPartnum_read = ''
        self.attr_InstrumentVersion_read = ''
        self.attr_SyncDivider_read = 0
        self.attr_ZeroCrossCh0_read = 0
        self.attr_ZeroCrossCh1_read = 0
        self.attr_LevelCh0_read = 0
        self.attr_LevelCh1_read = 0
        self.attr_Resolution_read = 0.0
        self.attr_Binning_read = 0
        self.attr_BaseResolution_read = 0.0
        self.attr_Offset_read = 0
        self.attr_CountRateCh0_read = 0
        self.attr_CountRateCh1_read = 0
        self.attr_OverflowStopper_read = False
        self.attr_OverflowStopperThreshold_read = 0
        self.attr_AcquisitionTime_read = 0.0
        self.attr_Flags_read = 0
        self.attr_IntegralCount_read = 0
        self.attr_HistogramMaxValue_read = 0
        self.attr_Histogram_read = [0]
        #----- PROTECTED REGION ID(PH_PhotonCounter.init_device) ENABLED START -----#
        self.set_change_event('State', True, False)
        self.set_change_event('Status', True, False)
        #RW attribute with event emission when write.
        self.set_change_event('SyncDivider', True, False)
        self.set_change_event('ZeroCrossCh0', True, False)
        self.set_change_event('ZeroCrossCh1', True, False)
        self.set_change_event('LevelCh0', True, False)
        self.set_change_event('LevelCh1', True, False)
        self.set_change_event('Resolution', True, False)
        self.set_change_event('Binning', True, False)
        self.set_change_event('Offset', True, False)
        self.set_change_event('OverflowStopper', True, False)
        self.set_change_event('OverflowStopperThreshold', True, False)
        self.set_change_event('AcquisitionTime', True, False)
        #RO attributes (should never change) emitted in the connection builder
        self.set_change_event('InstrumentModel', True, False)
        self.set_change_event('InstrumentPartnum', True, False)
        self.set_change_event('InstrumentVersion', True, False)
        self.set_change_event('BaseResolution', True, False)
        #RO attributes from measurements:
        self.set_change_event('CountRateCh0', True, False)
        self.set_change_event('CountRateCh1', True, False)
        self.set_change_event('Flags', True, False)
        self.set_change_event('IntegralCount', True, False)
        self.set_change_event('HistogramMaxValue', True, False)
        self.set_change_event('Histogram', True, False)
        self._acquisitionThread = None
        self._acquisitionStop = threading.Event()
        self._acquisitionStop.clear()
        self._locals = { 'self' : self }
        self._globals = globals()
        self._discoverer = None
        if not self.discover():
            return
        self._devidx = None
        self._instrument = None
        self.connect()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.init_device

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        self.debug_stream("In " + self.get_name() + ".always_excuted_hook()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.always_executed_hook

#==================================================================
#
#    PH_PhotonCounter read/write attribute methods
#
#==================================================================

#------------------------------------------------------------------
#    Read InstrumentModel attribute
#------------------------------------------------------------------
    def read_InstrumentModel(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_InstrumentModel()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.InstrumentModel_read) ENABLED START -----#
        self.attr_InstrumentModel_read = self._instrument.__model__
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.InstrumentModel_read
        attr.set_value(self.attr_InstrumentModel_read)
        
#------------------------------------------------------------------
#    Is InstrumentModel attribute allowed
#------------------------------------------------------------------
    def is_InstrumentModel_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_InstrumentModel_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read InstrumentPartnum attribute
#------------------------------------------------------------------
    def read_InstrumentPartnum(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_InstrumentPartnum()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.InstrumentPartnum_read) ENABLED START -----#
        self.attr_InstrumentPartnum_read = self._instrument.__partnum__
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.InstrumentPartnum_read
        attr.set_value(self.attr_InstrumentPartnum_read)
        
#------------------------------------------------------------------
#    Is InstrumentPartnum attribute allowed
#------------------------------------------------------------------
    def is_InstrumentPartnum_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_InstrumentPartnum_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read InstrumentVersion attribute
#------------------------------------------------------------------
    def read_InstrumentVersion(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_InstrumentVersion()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.InstrumentVersion_read) ENABLED START -----#
        self.attr_InstrumentVersion_read = self._instrument.__version__
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.InstrumentVersion_read
        attr.set_value(self.attr_InstrumentVersion_read)
        
#------------------------------------------------------------------
#    Is InstrumentVersion attribute allowed
#------------------------------------------------------------------
    def is_InstrumentVersion_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_InstrumentVersion_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read SyncDivider attribute
#------------------------------------------------------------------
    def read_SyncDivider(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_SyncDivider()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.SyncDivider_read) ENABLED START -----#
        try:
            attr_SyncDivider_read = self._instrument.getSyncDivider()
        except Exception,e:
            self.set_status("Exception with SyncDivider: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.SyncDivider_read
        attr.set_value(self.attr_SyncDivider_read)
        
#------------------------------------------------------------------
#    Write SyncDivider attribute
#------------------------------------------------------------------
    def write_SyncDivider(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_SyncDivider()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.SyncDivider_write) ENABLED START -----#
        try:
            self._instrument.setSyncDivider(data)
            self.fireEventsList([['SyncDivider',
                                  self._instrument.getSyncDivider()]])
        except Exception,e:
            self.set_status("Exception with SyncDivider: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.SyncDivider_write
        
#------------------------------------------------------------------
#    Is SyncDivider attribute allowed
#------------------------------------------------------------------
    def is_SyncDivider_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_SyncDivider_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read ZeroCrossCh0 attribute
#------------------------------------------------------------------
    def read_ZeroCrossCh0(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_ZeroCrossCh0()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.ZeroCrossCh0_read) ENABLED START -----#
        try:
            self.attr_ZeroCrossCh0_read, level = self._instrument.getInputCFD(0)
        except Exception,e:
            self.set_status("Exception with ZeroCrossCh0: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.ZeroCrossCh0_read
        attr.set_value(self.attr_ZeroCrossCh0_read)
        
#------------------------------------------------------------------
#    Write ZeroCrossCh0 attribute
#------------------------------------------------------------------
    def write_ZeroCrossCh0(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_ZeroCrossCh0()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.ZeroCrossCh0_write) ENABLED START -----#
        try:
            self._instrument.setInputCFD(0,CFDZeroCross=data)
            self.attr_ZeroCrossCh0_read, level = self._instrument.getInputCFD(0)
            self.fireEventsList([['ZeroCrossCh0',self.attr_ZeroCrossCh0_read]])
        except Exception, e:
            self.set_status("Exception with ZeroCrossCh0: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.ZeroCrossCh0_write
        
#------------------------------------------------------------------
#    Is ZeroCrossCh0 attribute allowed
#------------------------------------------------------------------
    def is_ZeroCrossCh0_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_ZeroCrossCh0_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read ZeroCrossCh1 attribute
#------------------------------------------------------------------
    def read_ZeroCrossCh1(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_ZeroCrossCh1()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.ZeroCrossCh1_read) ENABLED START -----#
        try:
            self.attr_ZeroCrossCh1_read, level = self._instrument.getInputCFD(1)
        except Exception,e:
            self.set_status("Exception with ZeroCrossCh1: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.ZeroCrossCh1_read
        attr.set_value(self.attr_ZeroCrossCh1_read)
        
#------------------------------------------------------------------
#    Write ZeroCrossCh1 attribute
#------------------------------------------------------------------
    def write_ZeroCrossCh1(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_ZeroCrossCh1()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.ZeroCrossCh1_write) ENABLED START -----#
        try:
            self._instrument.setInputCFD(1,CFDZeroCross=data)
            self.attr_ZeroCrossCh1_read, level = self._instrument.getInputCFD(1)
            self.fireEventsList([['ZeroCrossCh1',self.attr_ZeroCrossCh1_read]])
        except Exception, e:
            self.set_status("Exception with ZeroCrossCh1: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.ZeroCrossCh1_write
        
#------------------------------------------------------------------
#    Is ZeroCrossCh1 attribute allowed
#------------------------------------------------------------------
    def is_ZeroCrossCh1_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_ZeroCrossCh1_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read LevelCh0 attribute
#------------------------------------------------------------------
    def read_LevelCh0(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_LevelCh0()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.LevelCh0_read) ENABLED START -----#
        try:
            ZeroCross, self.attr_LevelCh0_read = self._instrument.getInputCFD(0)
        except Exception,e:
            self.set_status("Exception with LevelCh0: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.LevelCh0_read
        attr.set_value(self.attr_LevelCh0_read)
        
#------------------------------------------------------------------
#    Write LevelCh0 attribute
#------------------------------------------------------------------
    def write_LevelCh0(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_LevelCh0()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.LevelCh0_write) ENABLED START -----#
        try:
            self._instrument.setInputCFD(0,CFDLevel=data)
            ZeroCross, self.attr_LevelCh0_read = self._instrument.getInputCFD(0)
            self.fireEventsList([['LevelCh0',self.attr_LevelCh0_read]])
        except Exception, e:
            self.set_status("Exception with LevelCh0: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.LevelCh0_write
        
#------------------------------------------------------------------
#    Is LevelCh0 attribute allowed
#------------------------------------------------------------------
    def is_LevelCh0_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_LevelCh0_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read LevelCh1 attribute
#------------------------------------------------------------------
    def read_LevelCh1(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_LevelCh1()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.LevelCh1_read) ENABLED START -----#
        try:
            ZeroCross, self.attr_LevelCh1_read = self._instrument.getInputCFD(1)
        except Exception,e:
            self.set_status("Exception with LevelCh1: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.LevelCh1_read
        attr.set_value(self.attr_LevelCh1_read)
        
#------------------------------------------------------------------
#    Write LevelCh1 attribute
#------------------------------------------------------------------
    def write_LevelCh1(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_LevelCh1()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.LevelCh1_write) ENABLED START -----#
        try:
            self._instrument.setInputCFD(1,CFDLevel=data)
            ZeroCross, self.attr_LevelCh1_read = self._instrument.getInputCFD(1)
            self.fireEventsList([['LevelCh1',self.attr_LevelCh1_read]])
        except Exception, e:
            self.set_status("Exception with LevelCh1: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.LevelCh1_write
        
#------------------------------------------------------------------
#    Is LevelCh1 attribute allowed
#------------------------------------------------------------------
    def is_LevelCh1_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_LevelCh1_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read Resolution attribute
#------------------------------------------------------------------
    def read_Resolution(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_Resolution()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Resolution_read) ENABLED START -----#
        try:
            self.attr_Resolution_read = self._instrument.getResolution()
        except Exception,e:
            self.set_status("Exception with Resolution: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Resolution_read
        attr.set_value(self.attr_Resolution_read)
        
#------------------------------------------------------------------
#    Is Resolution attribute allowed
#------------------------------------------------------------------
    def is_Resolution_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_Resolution_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read Binning attribute
#------------------------------------------------------------------
    def read_Binning(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_Binning()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Binning_read) ENABLED START -----#
        try:
            self.attr_Binning_read = self._instrument.getBinning()
        except Exception,e:
            self.set_status("Exception with Binning: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Binning_read
        attr.set_value(self.attr_Binning_read)
        
#------------------------------------------------------------------
#    Write Binning attribute
#------------------------------------------------------------------
    def write_Binning(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_Binning()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.Binning_write) ENABLED START -----#
        try:
            self._instrument.setBinning(data)
            self.attr_Binning_read = self._instrument.getBinning()
            self.attr_Resolution_read = self._instrument.getResolution()
            self.fireEventsList([['Binning',self.attr_Binning_read],
                                 ['Resolution',self.attr_Resolution_read]])
        except Exception, e:
            self.set_status("Exception with Binning: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Binning_write
        
#------------------------------------------------------------------
#    Is Binning attribute allowed
#------------------------------------------------------------------
    def is_Binning_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_Binning_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read BaseResolution attribute
#------------------------------------------------------------------
    def read_BaseResolution(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_BaseResolution()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.BaseResolution_read) ENABLED START -----#
        try:
            self.attr_BaseResolution_read = self._instrument.getBaseResolution()
        except Exception,e:
            self.set_status("Exception with BaseResolution: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.BaseResolution_read
        attr.set_value(self.attr_BaseResolution_read)
        
#------------------------------------------------------------------
#    Is BaseResolution attribute allowed
#------------------------------------------------------------------
    def is_BaseResolution_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_BaseResolution_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read Offset attribute
#------------------------------------------------------------------
    def read_Offset(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_Offset()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Offset_read) ENABLED START -----#
        try:
            self.attr_Offset_read = self._instrument.getOffset()
        except Exception,e:
            self.set_status("Exception with Offset: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Offset_read
        attr.set_value(self.attr_Offset_read)
        
#------------------------------------------------------------------
#    Write Offset attribute
#------------------------------------------------------------------
    def write_Offset(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_Offset()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.Offset_write) ENABLED START -----#
        self._instrument.setOffset(data)
        
        try:
            self._instrument.setOffset(data)
            self.attr_Offset_read = self._instrument.getOffset()
            self.fireEventsList([['Offset',self.attr_Binning_read]])
        except Exception, e:
            self.set_status("Exception with Offset: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Offset_write
        
#------------------------------------------------------------------
#    Is Offset attribute allowed
#------------------------------------------------------------------
    def is_Offset_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_Offset_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read CountRateCh0 attribute
#------------------------------------------------------------------
    def read_CountRateCh0(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_CountRateCh0()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.CountRateCh0_read) ENABLED START -----#
        try:
            self.attr_CountRateCh0_read = self._instrument.getCountRate(0)
        except Exception,e:
            self.set_status("Exception with CountRateCh0: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.CountRateCh0_read
        attr.set_value(self.attr_CountRateCh0_read)
        
#------------------------------------------------------------------
#    Is CountRateCh0 attribute allowed
#------------------------------------------------------------------
    def is_CountRateCh0_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_CountRateCh0_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read CountRateCh1 attribute
#------------------------------------------------------------------
    def read_CountRateCh1(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_CountRateCh1()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.CountRateCh1_read) ENABLED START -----#
        try:
            self.attr_CountRateCh1_read = self._instrument.getCountRate(1)
        except Exception,e:
            self.set_status("Exception with CountRateCh1: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.CountRateCh1_read
        attr.set_value(self.attr_CountRateCh1_read)
        
#------------------------------------------------------------------
#    Is CountRateCh1 attribute allowed
#------------------------------------------------------------------
    def is_CountRateCh1_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_CountRateCh1_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read OverflowStopper attribute
#------------------------------------------------------------------
    def read_OverflowStopper(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_OverflowStopper()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.OverflowStopper_read) ENABLED START -----#
        try:
            self.attr_OverflowStopper_read,stopperCt = self._instrument.getStopOverflow()
        except Exception,e:
            self.set_status("Exception with StopOverflow: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.OverflowStopper_read
        attr.set_value(self.attr_OverflowStopper_read)
        
#------------------------------------------------------------------
#    Write OverflowStopper attribute
#------------------------------------------------------------------
    def write_OverflowStopper(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_OverflowStopper()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.OverflowStopper_write) ENABLED START -----#
        try:
            self._instrument.setStopOverflow(stop=data)
            self.attr_OverflowStopper_read,stopperCt = self._instrument.getStopOverflow()
            self.fireEventsList([['OverflowStopper',self.attr_OverflowStopper_read]])
        except Exception, e:
            self.set_status("Exception with OverflowStopper: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.OverflowStopper_write
        
#------------------------------------------------------------------
#    Is OverflowStopper attribute allowed
#------------------------------------------------------------------
    def is_OverflowStopper_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_OverflowStopper_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read OverflowStopperThreshold attribute
#------------------------------------------------------------------
    def read_OverflowStopperThreshold(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_OverflowStopperThreshold()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.OverflowStopperThreshold_read) ENABLED START -----#
        try:
            stopper,self.attr_OverflowStopperThreshold_read = self._instrument.getStopOverflow()
        except Exception,e:
            self.set_status("Exception with StopOverflow Threshold: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.OverflowStopperThreshold_read
        attr.set_value(self.attr_OverflowStopperThreshold_read)
        
#------------------------------------------------------------------
#    Write OverflowStopperThreshold attribute
#------------------------------------------------------------------
    def write_OverflowStopperThreshold(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_OverflowStopperThreshold()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.OverflowStopperThreshold_write) ENABLED START -----#
        try:
            self._instrument.setStopOverflow(count=data)
            stopper,self.attr_OverflowStopperThreshold_read = self._instrument.getStopOverflow()
            self.fireEventsList([['OverflowStopperThreshold',self.attr_OverflowStopperThreshold_read]])
        except Exception, e:
            self.set_status("Exception with OverflowStopperThreshold: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.OverflowStopperThreshold_write
        
#------------------------------------------------------------------
#    Is OverflowStopperThreshold attribute allowed
#------------------------------------------------------------------
    def is_OverflowStopperThreshold_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_OverflowStopperThreshold_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read AcquisitionTime attribute
#------------------------------------------------------------------
    def read_AcquisitionTime(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_AcquisitionTime()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.AcquisitionTime_read) ENABLED START -----#
        try:
            self.attr_AcquisitionTime_read = self._instrument.getAcquisitionTime()/1000.
        except Exception,e:
            self.set_status("Exception with Acquisition Time: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.AcquisitionTime_read
        attr.set_value(self.attr_AcquisitionTime_read)
        
#------------------------------------------------------------------
#    Write AcquisitionTime attribute
#------------------------------------------------------------------
    def write_AcquisitionTime(self, attr):
        self.debug_stream("In " + self.get_name() + ".write_AcquisitionTime()")
        data=attr.get_write_value()
        self.debug_stream("Attribute value = " + str(data))
        #----- PROTECTED REGION ID(PH_PhotonCounter.AcquisitionTime_write) ENABLED START -----#
        try:
            self._instrument.setAcquisitionTime(int(data*1000))
            self.fireEventsList([['AcquisitionTime',
                                  self._instrument.getAcquisitionTime()/1000.]])
        except Exception, e:
            self.set_status("Exception with AcquisitionTime: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.AcquisitionTime_write
        
#------------------------------------------------------------------
#    Is AcquisitionTime attribute allowed
#------------------------------------------------------------------
    def is_AcquisitionTime_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_AcquisitionTime_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read Flags attribute
#------------------------------------------------------------------
    def read_Flags(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_Flags()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Flags_read) ENABLED START -----#
        try:
            self.attr_Flags_read = self._instrument.getFlags()
        except Exception,e:
            self.set_status("Exception with Flags: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Flags_read
        attr.set_value(self.attr_Flags_read)
        
#------------------------------------------------------------------
#    Is Flags attribute allowed
#------------------------------------------------------------------
    def is_Flags_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_Flags_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read IntegralCount attribute
#------------------------------------------------------------------
    def read_IntegralCount(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_IntegralCount()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.IntegralCount_read) ENABLED START -----#
        try:
            self.attr_IntegralCount_read = self._instrument.integralCount()
        except Exception,e:
            self.set_status("Exception with integralcount: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.IntegralCount_read
        attr.set_value(self.attr_IntegralCount_read)
        
#------------------------------------------------------------------
#    Is IntegralCount attribute allowed
#------------------------------------------------------------------
    def is_IntegralCount_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_IntegralCount_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read HistogramMaxValue attribute
#------------------------------------------------------------------
    def read_HistogramMaxValue(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_HistogramMaxValue()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.HistogramMaxValue_read) ENABLED START -----#
        try:
            self.attr_HistogramMaxValue_read = np.array(self._instrument.getHistogram()).max()
        except Exceptio,e:
            self.error_stream("In read_HistogramMaxValue() Exception: %s"%e)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.HistogramMaxValue_read
        attr.set_value(self.attr_HistogramMaxValue_read)
        
#------------------------------------------------------------------
#    Is HistogramMaxValue attribute allowed
#------------------------------------------------------------------
    def is_HistogramMaxValue_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_HistogramMaxValue_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        
#------------------------------------------------------------------
#    Read Histogram attribute
#------------------------------------------------------------------
    def read_Histogram(self, attr):
        self.debug_stream("In " + self.get_name() + ".read_Histogram()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Histogram_read) ENABLED START -----#
        try:
            self.attr_Histogram_read = self._instrument.getHistogram()
        except Exception,e:
            self.set_status("Exception with Histogram: %s"%e, important=True)
            self.set_state(PyTango.DevState.FAULT)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Histogram_read
        attr.set_value(self.attr_Histogram_read)
        
#------------------------------------------------------------------
#    Is Histogram attribute allowed
#------------------------------------------------------------------
    def is_Histogram_allowed(self, attr):
        self.debug_stream("In " + self.get_name() + ".is_Histogram_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF])
        



#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self, data):
        self.debug_stream("In " + self.get_name() + ".read_attr_hardware()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.read_attr_hardware


#==================================================================
#
#    PH_PhotonCounter command methods
#
#==================================================================

#------------------------------------------------------------------
#    On command:
#------------------------------------------------------------------
    def On(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In " + self.get_name() +  ".On()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.On) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.On
        
#------------------------------------------------------------------
#    Is On command allowed
#------------------------------------------------------------------
    def is_On_allowed(self):
        self.debug_stream("In " + self.get_name() + ".is_On_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.ON,
            PyTango.DevState.RUNNING])
#------------------------------------------------------------------
#    Off command:
#------------------------------------------------------------------
    def Off(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In " + self.get_name() +  ".Off()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Off) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Off
        
#------------------------------------------------------------------
#    Is Off command allowed
#------------------------------------------------------------------
    def is_Off_allowed(self):
        self.debug_stream("In " + self.get_name() + ".is_Off_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF,
            PyTango.DevState.RUNNING])
#------------------------------------------------------------------
#    Start command:
#------------------------------------------------------------------
    def Start(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In " + self.get_name() +  ".Start()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Start) ENABLED START -----#
        self.continuousAcquisition()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Start
        
#------------------------------------------------------------------
#    Is Start command allowed
#------------------------------------------------------------------
    def is_Start_allowed(self):
        self.debug_stream("In " + self.get_name() + ".is_Start_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF,
            PyTango.DevState.RUNNING])
#------------------------------------------------------------------
#    Stop command:
#------------------------------------------------------------------
    def Stop(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In " + self.get_name() +  ".Stop()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Stop) ENABLED START -----#
        self._acquisitionStop.set()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Stop
        
#------------------------------------------------------------------
#    Is Stop command allowed
#------------------------------------------------------------------
    def is_Stop_allowed(self):
        self.debug_stream("In " + self.get_name() + ".is_Stop_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF,
            PyTango.DevState.ON])
#------------------------------------------------------------------
#    Acquire command:
#------------------------------------------------------------------
    def Acquire(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In " + self.get_name() +  ".Acquire()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Acquire) ENABLED START -----#
        self.singleAcquisition()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Acquire
        
#------------------------------------------------------------------
#    Is Acquire command allowed
#------------------------------------------------------------------
    def is_Acquire_allowed(self):
        self.debug_stream("In " + self.get_name() + ".is_Acquire_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF,
            PyTango.DevState.RUNNING])
#------------------------------------------------------------------
#    Abort command:
#------------------------------------------------------------------
    def Abort(self):
        """ 
        
        :param : 
        :type: PyTango.DevVoid
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In " + self.get_name() +  ".Abort()")
        #----- PROTECTED REGION ID(PH_PhotonCounter.Abort) ENABLED START -----#
        self._acquisitionStop.set()
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Abort
        
#------------------------------------------------------------------
#    Is Abort command allowed
#------------------------------------------------------------------
    def is_Abort_allowed(self):
        self.debug_stream("In " + self.get_name() + ".is_Abort_allowed()")
        return not(self.get_state() in [PyTango.DevState.FAULT,
            PyTango.DevState.INIT,
            PyTango.DevState.OFF,
            PyTango.DevState.ON])
#------------------------------------------------------------------
#    Exec command:
#------------------------------------------------------------------
    def Exec(self, argin):
        """ Dangerous command that allow to eval internally python code
        
        :param argin: 
        :type: PyTango.DevString
        :return: 
        :rtype: PyTango.DevString """
        self.debug_stream("In " + self.get_name() +  ".Exec()")
        argout = ''
        #----- PROTECTED REGION ID(PH_PhotonCounter.Exec) ENABLED START -----#
        cmd = argin
        L = self._locals
        G = self._globals
        try:
            try:
                # interpretation as expression
                result = eval(cmd, G, L)
            except SyntaxError:
                # interpretation as statement
                exec cmd in G, L
                result = L.get("y")

        except Exception, exc:
            # handles errors on both eval and exec level
            result = exc

        if type(result)==StringType:
            return result
        elif isinstance(result, BaseException):
            return "%s!\n%s" % (result.__class__.__name__, str(result))
        else:
            return pprint.pformat(result)
        #----- PROTECTED REGION END -----#	//	PH_PhotonCounter.Exec
        return argout
        

#==================================================================
#
#    PH_PhotonCounterClass class definition
#
#==================================================================
class PH_PhotonCounterClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'SerialNumber':
            [PyTango.DevString,
            "Serial number of the instrument to contact",
            [] ],
        'Simulation':
            [PyTango.DevBoolean,
            "Property to configure the device to, instead of use an instrument, simulate it.",
            [False]],
        }


    #    Command definitions
    cmd_list = {
        'On':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Off':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Start':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Stop':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Acquire':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Abort':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Exec':
            [[PyTango.DevString, "none"],
            [PyTango.DevString, "none"],
            {
                'Display level': PyTango.DispLevel.EXPERT,
            } ],
        }


    #    Attribute definitions
    attr_list = {
        'InstrumentModel':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Model",
                'description': "Name given by the instrument about its model.",
            } ],
        'InstrumentPartnum':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "PartNum",
                'description': "Name given by the instrument about its partnum.",
            } ],
        'InstrumentVersion':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "firmware version",
                'description': "Firmware version of the instrument.",
            } ],
        'SyncDivider':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Divider",
                'description': "Programable divider of the sync input. This allows to reduce the sync input rate.",
                'Memorized':"true"
            } ],
        'ZeroCrossCh0':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Zero Cross Channel 0",
                'unit': "mV",
                'description': "Zero cross level of the Constant Fraction Discriminator (CFD) for the channel 0",
                'Memorized':"true"
            } ],
        'ZeroCrossCh1':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Zero Cross Channel 1",
                'unit': "mV",
                'description': "Zero cross level of the Constant Fraction Discriminator (CFD) for the channel 1",
                'Memorized':"true"
            } ],
        'LevelCh0':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Level Channel 0",
                'unit': "mV",
                'description': "Discriminator level of the Constant Fraction Discriminator (CFD) for the channel 0",
                'Memorized':"true"
            } ],
        'LevelCh1':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Level Channel 1",
                'unit': "mV",
                'description': "Discriminator level of the Constant Fraction Discriminator (CFD) for the channel 1",
                'Memorized':"true"
            } ],
        'Resolution':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Resolution",
                'unit': "ps",
                'description': "Acquisition resolution.",
            } ],
        'Binning':
            [[PyTango.DevUShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Binning",
                'description': "To configure the resolution. Steps from 0 to 7 means resolutions 4, 8, 16, 32, ..., 512 ps.",
                'Memorized':"true"
            } ],
        'BaseResolution':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Base Resolution",
                'unit': "ps",
                'description': "The very basic resolution where no binning can be applied.",
            } ],
        'Offset':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Offset",
                'unit': "ns",
                'description': "Delay the acquisition window relatively to the sync frame.",
                'Memorized':"true"
            } ],
        'CountRateCh0':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Count Rate Channel 0",
                'unit': "cps",
                'format': "%g",
            } ],
        'CountRateCh1':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Count Rate Channel 1",
                'unit': "cps",
                'format': "%g",
            } ],
        'OverflowStopper':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Overflow stopper",
                'Display level': PyTango.DispLevel.EXPERT,
                'Memorized':"true"
            } ],
        'OverflowStopperThreshold':
            [[PyTango.DevULong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Overflow threshold",
                'Display level': PyTango.DispLevel.EXPERT,
                'Memorized':"true"
            } ],
        'AcquisitionTime':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Acquisition time",
                'unit': "s",
                'Memorized':"true"
            } ],
        'Flags':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'Display level': PyTango.DispLevel.EXPERT,
            } ],
        'IntegralCount':
            [[PyTango.DevLong64,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Integration",
                'unit': "counts",
            } ],
        'HistogramMaxValue':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Histogram Maximum Value",
                'description': "From read histogram, its maximum value",
            } ],
        'Histogram':
            [[PyTango.DevLong,
            PyTango.SPECTRUM,
            PyTango.READ, 65536]],
        }


#------------------------------------------------------------------
#    PH_PhotonCounterClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In PH_PhotonCounter Class  constructor"

#==================================================================
#
#    PH_PhotonCounter class main method
#
#==================================================================
def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(PH_PhotonCounterClass,PH_PhotonCounter,'PH_PhotonCounter')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e

if __name__ == '__main__':
    main()
