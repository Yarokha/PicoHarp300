The library and the API can be get from:
http://www.picoquant.com/products/category/tcspc-and-time-tagging-modules/picoharp-300-stand-alone-tcspc-module-with-usb-interface

Event that and for simplicity, here is explained a bit the steps to follow.

1.- udev
========

add a rulen in the /etc/udev/rules.d directory to respond to the vendor an 
instrument product:
ATTR{idVendor}=="0e0d", ATTR{idProduct}=="0003", MODE="0666"

This numbering can be saw when having one instrument plugged and lsusb is 
called. After that, reload udev rules or reboot the machine.

2.- locate the original library
===============================

define an ARCH variable with your bit architecture

$ sudo mkdir /usr/local/lib/ph300
$ sudo cp lib$ARCH/phlib.so /usr/local/lib/ph300/
$ sudo chmod 755 /usr/local/lib/ph300/phlib.so
$ sudo cp phlib.h  /usr/local/lib/ph300/
$ sudo cp phdefin.h  /usr/local/lib/ph300/
$ sudo cp errorcodes.h  /usr/local/lib/ph300/
$ sudo chmod 644 /usr/local/lib/ph300/*.h
$ sudo ln -s /usr/local/lib/ph300/phlib.so /usr/lib/libph300.so

This driver expects the library to be in: /usr/local/lib/ph300
and a symlink in: /usr/lib/

Their howto places the headers in: /usr/local/lib/ph300/
And that's why of python extension tries to find them there.

3.- cython dependency for the python extension
==============================================

If you don't have cython available in your system, or the version you have is 
not compatible, download from http://www.cython.org/release/ one of the 
released, in this case we've used Cython-0.20.1.tar.gz
$ wget http://www.cython.org/release/Cython-0.20.1.tar.gz
$ tar xzf Cython-0.20.1.tar.gz
$ cd Cython-0.20.1/

To compile it, execute in the :
$ python setup.py build

To have the cython available, its libraries must be available in the 
PYTHONPATH and the binary in the PATH:
$ export PYTHONPATH=`pwd`:$PYTHONPATH
$ export PATH=`pwd`/bin:$PATH

4.- setuptools dependency
=========================

In our case Suse11.1 has it as a package, then we didn't proceed like in 
section 3.

5.- python PicoHarp extension
=============================

To build Python extension, execute:
$ python setup.py build

6.- Others
==========
After the step 5, it will left the file:
- build/lib.(...)/PicoHarp.so

Where this .so has to be lefted in a pythonpath and then it can be imported 
from python.

Please check that the dynamic links are correctly found:

ldd PicoHarp.so 
        linux-vdso.so.1
        PIC
        libph300.so
        libpthread.so.0
        libc.so.6
        libusb-0.1.so.4
        libm.so.6
        /lib64/ld-linux-x86-64.so.2

ldd /usr/lib/libph300.so
        linux-vdso.so.1
        libusb-0.1.so.4 => /lib/x86_64-linux-gnu/libusb-0.1.so.4
        libm.so.6
        libc.so.6
        /lib64/ld-linux-x86-64.so.2

7.- Using it from python
========================
To do the same than in the dlldemo given in from the manufacturer's software
(mention at the beginning of this document) where there is a procedure to do 
similar action but with in a python console.

>>> import PicoHarp
>>> PicoHarp.__version__()
'3.0.0-0'

Where the two first numbers comes from the manufacturer's library and the two 
on the right are internal from this extension and they are defined in the 
version.py file.

Search for instruments in your computer:

>>> discoverer = PicoHarp.Discoverer(debug=True)
Searching for PicoHarp devices...
Devidx     Status
  0        S/N NNNNNNN
  1        ERROR_DEVICE_BUSY
  2        no device
  3        no device
  4        no device
  5        no device
  6        no device
  7        no device
  
(This output is only present if you have flagged for debug.)

To know how many instruments were found:
>>> discoverer.count
1

To know the serials of the instruments found:
>>> discoverer.serials
["NNNNNNN"]

To know the identification for the serial of your instrument
>>> discoverer.search("NNNNNNN")
0

Given the serial of the instrument you like to use, you can connect to it:
>>> instrument = PicoHarp.Instrument(0,debug=True)
Instrument initialised
Found Model PicoHarp 300 Partnum 930004 Version 2.0  
Instrument calibration done
SetSyncDiv has been set (8)
setInputCFD has been set for channel 0: (CFDLevel:100,CFDZeroCross:10)
setInputCFD has been set for channel 1: (CFDLevel:100,CFDZeroCross:10)
Binning = 0
Offset = 0
Resolution = 4
CountRate[0] = 0
CountRate[1] = 0
Overflow stopper set

(This output is only present if you have flagged for debug.)

>>> instrument.acquire()
Histogram memory clean
CountRate[0] = 0
CountRate[1] = 0
start measurement
stop measurement
Histogram: [0L, 0L, 0L, 0L, 0L, 0L, 0L (...) 0L, 0L, 0L, 0L, 0L, 0L, 0L]
Flags: 0b10100100
Integral count = 0
waitloop = 0 total count = 0

>>> histogram = instrument.getHistogram()
Histogram: [0L, 0L, 0L, 0L, 0L, 0L, 0L (...) 0L, 0L, 0L, 0L, 0L, 0L, 0L]

>>> type(histogram)
<type 'list'>

>>> len(histogram)
65536
